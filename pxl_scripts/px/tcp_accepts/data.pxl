# Copyright (c) Alok Nandan Nikhil
# Licensed under the Apache License, Version 2.0 (the "License")

import pxtrace
import px

program = """
#!/usr/bin/env bpftrace
/*
 * tcplife - Trace TCP session lifespans with connection details.
 *
 * See BPF Performance Tools, Chapter 10, for an explanation of this tool.
 *
 * Copyright (c) 2019 Brendan Gregg.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * This was originally created for the BPF Performance Tools book
 * published by Addison Wesley. ISBN-13: 9780136554820
 * When copying or porting, include this comment.
 *
 * 17-Apr-2019  Brendan Gregg   Created this.
 */

#include <net/sock.h>
#include <linux/socket.h>
#include <linux/tcp.h>
#include <net/tcp_states.h>

kprobe:tcp_set_state
{
    $sk = (struct sock *)arg0;
    $newstate = arg1;

    /*
         * This tool includes PID and comm context. From TCP this is best
         * effort, and may be wrong in some situations. It does this:
         * - record timestamp on any state < TCP_FIN_WAIT1
         *      note some state transitions may not be present via this kprobe
         * - cache task context on:
         *      TCP_SYN_SENT: tracing from client
         *      TCP_LAST_ACK: client-closed from server
         * - do output on TCP_CLOSE:
         *      fetch task context if cached, or use current task
         */

        // record first timestamp seen for this socket
        if ($newstate < TCP_FIN_WAIT1 && @birth[$sk] == 0) {
                @birth[$sk] = nsecs;
        }

        // record PID & comm on SYN_SENT
        if ($newstate == TCP_SYN_SENT || $newstate == TCP_LAST_ACK) {
                @skpid[$sk] = pid;
                @skcomm[$sk] = comm;
        }

        // session ended: calculate lifespan and print
        if ($newstate == TCP_CLOSE && @birth[$sk]) {
                $delta_ms = (nsecs - @birth[$sk]) / 1e6;
                $lport = $sk->__sk_common.skc_num;
                $dport = $sk->__sk_common.skc_dport;
                $dport = ($dport >> 8) | (($dport << 8) & 0xff00);
                $tp = (struct tcp_sock *)$sk;
                $pid = @skpid[$sk];
                $comm = @skcomm[$sk];
                if ($comm == "") {
                        // not cached, use current task
                        $pid = pid;
                        $comm = comm;
                }

                $family = $sk->__sk_common.skc_family;
                $saddr = ntop(0);
                $daddr = ntop(0);
                if ($family == AF_INET) {
                        $saddr = ntop(AF_INET, $sk->__sk_common.skc_rcv_saddr);
                        $daddr = ntop(AF_INET, $sk->__sk_common.skc_daddr);
                } else {
                        // AF_INET6
                        $saddr = ntop(AF_INET6,
                            $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
                        $daddr = ntop(AF_INET6,
                            $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
                }

        printf("time:%llu src_ip:%s src_port:%d dst_ip:%s dst_port:%d state:%d",
            nsecs,
            $saddr,
            $lport,
            $daddr,
            $dport,
            $newstate);

                delete(@birth[$sk]);
                delete(@skpid[$sk]);
                delete(@skcomm[$sk]);
        }
}
"""


def tcp_accepts_func():
    table_name = 'tcp_accepts'
    pxtrace.UpsertTracepoint('tcp_accept_tracer',
                             table_name,
                             program,
                             pxtrace.kprobe(),
                             "10m")

    df = px.DataFrame(table=table_name,
                      select=['time', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'state'])

    # Convert IPs to domain names.
    # Source is expected to be pod, while destination is expected to be a service.
    df.src = px.pod_id_to_pod_name(px.ip_to_pod_id(df.src_ip))
    df.dst = px.Service(px.nslookup(df.dst_ip))

    # Count accepts.
    df = df.groupby(['src', 'dst']).agg(accepts=('src', px.count))

    # Filter for a particular service, if desired.
    df = df[px.contains(df['dst'], '')]

    # Set a threshold to display, if desired.
    df = df[df['accepts'] > 0]

    return df
